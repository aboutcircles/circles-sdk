/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface HubInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "deployedAt"
      | "divisor"
      | "inflation"
      | "initialIssuance"
      | "limits"
      | "name"
      | "organizations"
      | "period"
      | "seen"
      | "signupBonus"
      | "symbol"
      | "timeout"
      | "tokenToUser"
      | "userToToken"
      | "validation"
      | "periods"
      | "issuance"
      | "issuanceByStep"
      | "inflate"
      | "signup"
      | "organizationSignup"
      | "trust"
      | "pow"
      | "checkSendLimit"
      | "transferThrough"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "HubTransfer"
      | "OrganizationSignup"
      | "Signup"
      | "Trust"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "deployedAt",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "divisor", values?: undefined): string;
  encodeFunctionData(functionFragment: "inflation", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialIssuance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "limits",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "organizations",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "period", values?: undefined): string;
  encodeFunctionData(functionFragment: "seen", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "signupBonus",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "timeout", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenToUser",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userToToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "validation",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "periods", values?: undefined): string;
  encodeFunctionData(functionFragment: "issuance", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "issuanceByStep",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "inflate",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "signup", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "organizationSignup",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "trust",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pow",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkSendLimit",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferThrough",
    values: [AddressLike[], AddressLike[], AddressLike[], BigNumberish[]]
  ): string;

  decodeFunctionResult(functionFragment: "deployedAt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "divisor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "inflation", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initialIssuance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "limits", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "organizations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "period", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "seen", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "signupBonus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "timeout", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenToUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userToToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "validation", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "periods", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "issuance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "issuanceByStep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "inflate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "signup", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "organizationSignup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "trust", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkSendLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferThrough",
    data: BytesLike
  ): Result;
}

export namespace HubTransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, amount: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OrganizationSignupEvent {
  export type InputTuple = [organization: AddressLike];
  export type OutputTuple = [organization: string];
  export interface OutputObject {
    organization: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SignupEvent {
  export type InputTuple = [user: AddressLike, token: AddressLike];
  export type OutputTuple = [user: string, token: string];
  export interface OutputObject {
    user: string;
    token: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TrustEvent {
  export type InputTuple = [
    canSendTo: AddressLike,
    user: AddressLike,
    limit: BigNumberish
  ];
  export type OutputTuple = [canSendTo: string, user: string, limit: bigint];
  export interface OutputObject {
    canSendTo: string;
    user: string;
    limit: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Hub extends BaseContract {
  connect(runner?: ContractRunner | null): Hub;
  waitForDeployment(): Promise<this>;

  interface: HubInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  deployedAt: TypedContractMethod<[], [bigint], "view">;

  divisor: TypedContractMethod<[], [bigint], "view">;

  inflation: TypedContractMethod<[], [bigint], "view">;

  initialIssuance: TypedContractMethod<[], [bigint], "view">;

  limits: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;

  name: TypedContractMethod<[], [string], "view">;

  organizations: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  period: TypedContractMethod<[], [bigint], "view">;

  seen: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  signupBonus: TypedContractMethod<[], [bigint], "view">;

  symbol: TypedContractMethod<[], [string], "view">;

  timeout: TypedContractMethod<[], [bigint], "view">;

  tokenToUser: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  userToToken: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  validation: TypedContractMethod<
    [arg0: AddressLike],
    [
      [boolean, bigint, bigint] & {
        seen: boolean;
        sent: bigint;
        received: bigint;
      }
    ],
    "view"
  >;

  /**
   * helper function for finding the amount of inflation periods since this hub was deployed
   */
  periods: TypedContractMethod<[], [bigint], "view">;

  /**
   * current issuance is the initial issuance inflated by the amount of inflation periods since the hub was deployed
   * calculates the current issuance rate per second
   */
  issuance: TypedContractMethod<[], [bigint], "view">;

  /**
   * finds the inflation rate at a given inflation period
   * @param _periods the step to calculate the issuance rate at
   */
  issuanceByStep: TypedContractMethod<
    [_periods: BigNumberish],
    [bigint],
    "view"
  >;

  /**
   * this is basically the calculation for compound interest, with some adjustments because of integer math
   * find the current issuance rate for any initial issuance and amount of periods
   * @param _initial the starting issuance rate
   * @param _periods the step to calculate the issuance rate as of
   */
  inflate: TypedContractMethod<
    [_initial: BigNumberish, _periods: BigNumberish],
    [bigint],
    "view"
  >;

  /**
   * signup is permanent, there's no way to unsignup
   * signup to this circles hub - create a circles token and join the trust graph
   */
  signup: TypedContractMethod<[], [void], "nonpayable">;

  /**
   * signup is permanent for organizations too, there's no way to unsignup
   * register an organization address with the hub and join the trust graph
   */
  organizationSignup: TypedContractMethod<[], [void], "nonpayable">;

  /**
   * the trust graph is weighted and directed
   * trust a user, calling this means you're able to receive tokens from this user transitively
   * @param limit the amount this user is trusted, as a percentage of 100
   * @param user the user to be trusted
   */
  trust: TypedContractMethod<
    [user: AddressLike, limit: BigNumberish],
    [void],
    "nonpayable"
  >;

  /**
   * this is an implementation of exponentiation by squares
   * @param base the base to be used in the calculation
   * @param exponent the exponent to be used in the calculation
   */
  pow: TypedContractMethod<
    [base: BigNumberish, exponent: BigNumberish],
    [bigint],
    "view"
  >;

  /**
   * the goal of this function is to always return a sensible number, it's used to validate transfer throughs, and also heavily in the graph/pathfinding services
   * finds the maximum amount of a specific token that can be sent between two users
   * @param dest the recipient of the tokens
   * @param src the sender of the tokens
   * @param tokenOwner the safe/owner that the token was minted to
   */
  checkSendLimit: TypedContractMethod<
    [tokenOwner: AddressLike, src: AddressLike, dest: AddressLike],
    [bigint],
    "view"
  >;

  /**
   * tokenOwners[0], srcs[0], dests[0], and wads[0] constitute a transaction step
   * walks through tokenOwners, srcs, dests, and amounts array and executes transtive transfer
   * @param dests the recipient of each transaction step
   * @param srcs the sender of each transaction step
   * @param tokenOwners the owner of the tokens being sent in each transaction step
   * @param wads the amount for each transaction step
   */
  transferThrough: TypedContractMethod<
    [
      tokenOwners: AddressLike[],
      srcs: AddressLike[],
      dests: AddressLike[],
      wads: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "deployedAt"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "divisor"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "inflation"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "initialIssuance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "limits"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "organizations"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "period"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "seen"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "signupBonus"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "timeout"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "tokenToUser"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "userToToken"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "validation"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [boolean, bigint, bigint] & {
        seen: boolean;
        sent: bigint;
        received: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "periods"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "issuance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "issuanceByStep"
  ): TypedContractMethod<[_periods: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "inflate"
  ): TypedContractMethod<
    [_initial: BigNumberish, _periods: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "signup"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "organizationSignup"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "trust"
  ): TypedContractMethod<
    [user: AddressLike, limit: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "pow"
  ): TypedContractMethod<
    [base: BigNumberish, exponent: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "checkSendLimit"
  ): TypedContractMethod<
    [tokenOwner: AddressLike, src: AddressLike, dest: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferThrough"
  ): TypedContractMethod<
    [
      tokenOwners: AddressLike[],
      srcs: AddressLike[],
      dests: AddressLike[],
      wads: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "HubTransfer"
  ): TypedContractEvent<
    HubTransferEvent.InputTuple,
    HubTransferEvent.OutputTuple,
    HubTransferEvent.OutputObject
  >;
  getEvent(
    key: "OrganizationSignup"
  ): TypedContractEvent<
    OrganizationSignupEvent.InputTuple,
    OrganizationSignupEvent.OutputTuple,
    OrganizationSignupEvent.OutputObject
  >;
  getEvent(
    key: "Signup"
  ): TypedContractEvent<
    SignupEvent.InputTuple,
    SignupEvent.OutputTuple,
    SignupEvent.OutputObject
  >;
  getEvent(
    key: "Trust"
  ): TypedContractEvent<
    TrustEvent.InputTuple,
    TrustEvent.OutputTuple,
    TrustEvent.OutputObject
  >;

  filters: {
    "HubTransfer(address,address,uint256)": TypedContractEvent<
      HubTransferEvent.InputTuple,
      HubTransferEvent.OutputTuple,
      HubTransferEvent.OutputObject
    >;
    HubTransfer: TypedContractEvent<
      HubTransferEvent.InputTuple,
      HubTransferEvent.OutputTuple,
      HubTransferEvent.OutputObject
    >;

    "OrganizationSignup(address)": TypedContractEvent<
      OrganizationSignupEvent.InputTuple,
      OrganizationSignupEvent.OutputTuple,
      OrganizationSignupEvent.OutputObject
    >;
    OrganizationSignup: TypedContractEvent<
      OrganizationSignupEvent.InputTuple,
      OrganizationSignupEvent.OutputTuple,
      OrganizationSignupEvent.OutputObject
    >;

    "Signup(address,address)": TypedContractEvent<
      SignupEvent.InputTuple,
      SignupEvent.OutputTuple,
      SignupEvent.OutputObject
    >;
    Signup: TypedContractEvent<
      SignupEvent.InputTuple,
      SignupEvent.OutputTuple,
      SignupEvent.OutputObject
    >;

    "Trust(address,address,uint256)": TypedContractEvent<
      TrustEvent.InputTuple,
      TrustEvent.OutputTuple,
      TrustEvent.OutputObject
    >;
    Trust: TypedContractEvent<
      TrustEvent.InputTuple,
      TrustEvent.OutputTuple,
      TrustEvent.OutputObject
    >;
  };
}
