/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface MigrationInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "convertFromV1ToDemurrage"
      | "hubV1"
      | "hubV2"
      | "inflationDayZero"
      | "migrate"
      | "period"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "convertFromV1ToDemurrage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "hubV1", values?: undefined): string;
  encodeFunctionData(functionFragment: "hubV2", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "inflationDayZero",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "migrate",
    values: [AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "period", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "convertFromV1ToDemurrage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hubV1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hubV2", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "inflationDayZero",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "migrate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "period", data: BytesLike): Result;
}

export interface Migration extends BaseContract {
  connect(runner?: ContractRunner | null): Migration;
  waitForDeployment(): Promise<this>;

  interface: MigrationInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  convertFromV1ToDemurrage: TypedContractMethod<
    [_amount: BigNumberish],
    [bigint],
    "view"
  >;

  hubV1: TypedContractMethod<[], [string], "view">;

  hubV2: TypedContractMethod<[], [string], "view">;

  inflationDayZero: TypedContractMethod<[], [bigint], "view">;

  migrate: TypedContractMethod<
    [_avatars: AddressLike[], _amounts: BigNumberish[]],
    [bigint[]],
    "nonpayable"
  >;

  period: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "convertFromV1ToDemurrage"
  ): TypedContractMethod<[_amount: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "hubV1"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "hubV2"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "inflationDayZero"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "migrate"
  ): TypedContractMethod<
    [_avatars: AddressLike[], _amounts: BigNumberish[]],
    [bigint[]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "period"
  ): TypedContractMethod<[], [bigint], "view">;

  filters: {};
}
