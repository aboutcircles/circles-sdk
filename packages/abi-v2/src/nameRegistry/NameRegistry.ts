/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface NameRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_CIRCLES_NAME_PREFIX"
      | "DEFAULT_CIRCLES_SYMBOL"
      | "MAX_SHORT_NAME"
      | "avatarToMetaDataDigest"
      | "calculateShortNameWithNonce"
      | "customNames"
      | "customSymbols"
      | "getMetadataDigest"
      | "hub"
      | "isValidName"
      | "isValidSymbol"
      | "name"
      | "registerCustomName"
      | "registerCustomSymbol"
      | "registerShortName"
      | "registerShortNameWithNonce"
      | "searchShortName"
      | "setMetadataDigest"
      | "shortNameToAvatar"
      | "shortNames"
      | "symbol"
      | "updateMetadataDigest"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "RegisterShortName" | "UpdateMetadataDigest"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_CIRCLES_NAME_PREFIX",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_CIRCLES_SYMBOL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_SHORT_NAME",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "avatarToMetaDataDigest",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateShortNameWithNonce",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "customNames",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "customSymbols",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMetadataDigest",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "hub", values?: undefined): string;
  encodeFunctionData(functionFragment: "isValidName", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isValidSymbol",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "name", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "registerCustomName",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerCustomSymbol",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerShortName",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerShortNameWithNonce",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "searchShortName",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMetadataDigest",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "shortNameToAvatar",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "shortNames",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "updateMetadataDigest",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_CIRCLES_NAME_PREFIX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_CIRCLES_SYMBOL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_SHORT_NAME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "avatarToMetaDataDigest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateShortNameWithNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "customNames",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "customSymbols",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMetadataDigest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hub", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isValidName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidSymbol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerCustomName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerCustomSymbol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerShortName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerShortNameWithNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "searchShortName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMetadataDigest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shortNameToAvatar",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "shortNames", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateMetadataDigest",
    data: BytesLike
  ): Result;
}

export namespace RegisterShortNameEvent {
  export type InputTuple = [
    avatar: AddressLike,
    shortName: BigNumberish,
    nonce: BigNumberish
  ];
  export type OutputTuple = [avatar: string, shortName: bigint, nonce: bigint];
  export interface OutputObject {
    avatar: string;
    shortName: bigint;
    nonce: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateMetadataDigestEvent {
  export type InputTuple = [avatar: AddressLike, metadataDigest: BytesLike];
  export type OutputTuple = [avatar: string, metadataDigest: string];
  export interface OutputObject {
    avatar: string;
    metadataDigest: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface NameRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): NameRegistry;
  waitForDeployment(): Promise<this>;

  interface: NameRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_CIRCLES_NAME_PREFIX: TypedContractMethod<[], [string], "view">;

  DEFAULT_CIRCLES_SYMBOL: TypedContractMethod<[], [string], "view">;

  MAX_SHORT_NAME: TypedContractMethod<[], [bigint], "view">;

  avatarToMetaDataDigest: TypedContractMethod<
    [arg0: AddressLike],
    [string],
    "view"
  >;

  calculateShortNameWithNonce: TypedContractMethod<
    [_avatar: AddressLike, _nonce: BigNumberish],
    [bigint],
    "view"
  >;

  customNames: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  customSymbols: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  getMetadataDigest: TypedContractMethod<
    [_avatar: AddressLike],
    [string],
    "view"
  >;

  hub: TypedContractMethod<[], [string], "view">;

  isValidName: TypedContractMethod<[_name: string], [boolean], "view">;

  isValidSymbol: TypedContractMethod<[_symbol: string], [boolean], "view">;

  name: TypedContractMethod<[_avatar: AddressLike], [string], "view">;

  registerCustomName: TypedContractMethod<
    [_avatar: AddressLike, _name: string],
    [void],
    "nonpayable"
  >;

  registerCustomSymbol: TypedContractMethod<
    [_avatar: AddressLike, _symbol: string],
    [void],
    "nonpayable"
  >;

  registerShortName: TypedContractMethod<[], [void], "nonpayable">;

  registerShortNameWithNonce: TypedContractMethod<
    [_nonce: BigNumberish],
    [void],
    "nonpayable"
  >;

  searchShortName: TypedContractMethod<
    [_avatar: AddressLike],
    [[bigint, bigint] & { shortName_: bigint; nonce_: bigint }],
    "view"
  >;

  setMetadataDigest: TypedContractMethod<
    [_avatar: AddressLike, _metadataDigest: BytesLike],
    [void],
    "nonpayable"
  >;

  shortNameToAvatar: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  shortNames: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  symbol: TypedContractMethod<[_avatar: AddressLike], [string], "view">;

  updateMetadataDigest: TypedContractMethod<
    [_metadataDigest: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_CIRCLES_NAME_PREFIX"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_CIRCLES_SYMBOL"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MAX_SHORT_NAME"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "avatarToMetaDataDigest"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "calculateShortNameWithNonce"
  ): TypedContractMethod<
    [_avatar: AddressLike, _nonce: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "customNames"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "customSymbols"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getMetadataDigest"
  ): TypedContractMethod<[_avatar: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "hub"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "isValidName"
  ): TypedContractMethod<[_name: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "isValidSymbol"
  ): TypedContractMethod<[_symbol: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[_avatar: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "registerCustomName"
  ): TypedContractMethod<
    [_avatar: AddressLike, _name: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerCustomSymbol"
  ): TypedContractMethod<
    [_avatar: AddressLike, _symbol: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerShortName"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "registerShortNameWithNonce"
  ): TypedContractMethod<[_nonce: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "searchShortName"
  ): TypedContractMethod<
    [_avatar: AddressLike],
    [[bigint, bigint] & { shortName_: bigint; nonce_: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "setMetadataDigest"
  ): TypedContractMethod<
    [_avatar: AddressLike, _metadataDigest: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "shortNameToAvatar"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "shortNames"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[_avatar: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "updateMetadataDigest"
  ): TypedContractMethod<[_metadataDigest: BytesLike], [void], "nonpayable">;

  getEvent(
    key: "RegisterShortName"
  ): TypedContractEvent<
    RegisterShortNameEvent.InputTuple,
    RegisterShortNameEvent.OutputTuple,
    RegisterShortNameEvent.OutputObject
  >;
  getEvent(
    key: "UpdateMetadataDigest"
  ): TypedContractEvent<
    UpdateMetadataDigestEvent.InputTuple,
    UpdateMetadataDigestEvent.OutputTuple,
    UpdateMetadataDigestEvent.OutputObject
  >;

  filters: {
    "RegisterShortName(address,uint72,uint256)": TypedContractEvent<
      RegisterShortNameEvent.InputTuple,
      RegisterShortNameEvent.OutputTuple,
      RegisterShortNameEvent.OutputObject
    >;
    RegisterShortName: TypedContractEvent<
      RegisterShortNameEvent.InputTuple,
      RegisterShortNameEvent.OutputTuple,
      RegisterShortNameEvent.OutputObject
    >;

    "UpdateMetadataDigest(address,bytes32)": TypedContractEvent<
      UpdateMetadataDigestEvent.InputTuple,
      UpdateMetadataDigestEvent.OutputTuple,
      UpdateMetadataDigestEvent.OutputObject
    >;
    UpdateMetadataDigest: TypedContractEvent<
      UpdateMetadataDigestEvent.InputTuple,
      UpdateMetadataDigestEvent.OutputTuple,
      UpdateMetadataDigestEvent.OutputObject
    >;
  };
}
